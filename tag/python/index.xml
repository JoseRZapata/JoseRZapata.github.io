<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Jose Ricardo Zapata</title>
    <link>https://joserzapata.github.io/tag/python/</link>
      <atom:link href="https://joserzapata.github.io/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Mon, 28 Sep 2020 10:57:42 -0500</lastBuildDate>
    <image>
      <url>https://joserzapata.github.io/img/JoseRZapata.jpg</url>
      <title>Python</title>
      <link>https://joserzapata.github.io/tag/python/</link>
    </image>
    
    <item>
      <title>Sesquialtera in the Colombian Bambuco: Perception and Estimation of Beat and Meter</title>
      <link>https://joserzapata.github.io/publication/ismir2020/</link>
      <pubDate>Mon, 28 Sep 2020 10:57:42 -0500</pubDate>
      <guid>https://joserzapata.github.io/publication/ismir2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visualizacion Datos Coronavirus (COVID19) Mundial con Plotly</title>
      <link>https://joserzapata.github.io/post/covid19-visualizacion/</link>
      <pubDate>Tue, 17 Mar 2020 17:03:57 -0500</pubDate>
      <guid>https://joserzapata.github.io/post/covid19-visualizacion/</guid>
      <description>

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/JoseRZapata/JoseRZapata.github.io/blob/master/Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg&#34; alt=&#34;Open In Colab&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/JoseRZapata/JoseRZapata.github.io/master?filepath=Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg&#34; alt=&#34;Binder&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/JoseRZapata/JoseRZapata.github.io/blob/master/Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg&#34; alt=&#34;nbviewer&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;He visto en las redes sociales varias visualizaciones de los datos del COVID 19 y queria realizarlos en Python para tener la actualizacion de las graficas actualizadas cada dia, y ademas practicar el uso de &lt;a href=&#34;https://plotly.com/&#34;&gt;plotly&lt;/a&gt; para visualizacion interactiva.&lt;/p&gt;

&lt;p&gt;Principalmente los datos que se tienen es del numero de personas contegiadas y personas muertas quiero visualizar los datos de personas recuperadas y casos activos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pueden interactuar con las graficas con el mouse y las Graficas se actualizaran
diariamente con los nuevos datos!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Informacion extraida de 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;https://github.com/CSSEGISandData/COVID-19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualizaciones:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;27/May/2020 Se Agregar los datos de las personas recuperadas y se calculan los casos Activos&lt;/li&gt;
&lt;li&gt;29/May/2020 Se agrega Bar chart race&lt;/li&gt;
&lt;li&gt;25/Sep/2020 Mapa Mundial de Confirmados por Pais con choropleth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&#34; data-name=&#34;bmc-button&#34; data-slug=&#34;joserzapata&#34; data-color=&#34;#328cc1&#34; data-emoji=&#34;&#34; data-font=&#34;Cookie&#34; data-text=&#34;Comprame un Cafe&#34; data-outline-color=&#34;#000000&#34; data-font-color=&#34;#ffffff&#34; data-coffee-color=&#34;#FFDD00&#34; &gt;&lt;/script&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#paquetes-de-python-y-datos&#34;&gt;Paquetes de Python y Datos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#paquetes-de-python&#34;&gt;Paquetes de Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importar-datos&#34;&gt;Importar datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#datos-cssegisanddata-covid-19&#34;&gt;Datos CSSEGISandData/COVID-19&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#eliminar-ubicacion&#34;&gt;Eliminar Ubicacion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#casos-activos&#34;&gt;Casos Activos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#consolidar-datos&#34;&gt;Consolidar datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#datos-mundiales&#34;&gt;Datos Mundiales&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#covid19-en-el-mundo&#34;&gt;Covid19 en el Mundo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#evolucion-animada-de-casos-activos-por-pais&#34;&gt;Evolucion Animada de Casos Activos por Pais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualizacion-con-plotly&#34;&gt;Visualizacion con Plotly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#valores-mundiales-de-casos-confirmados-activos-recuperados-y-muertos&#34;&gt;Valores Mundiales de Casos Confirmados, Activos, Recuperados y Muertos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapa-mundial-de-confirmados-por-pais&#34;&gt;Mapa Mundial de Confirmados por Pais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#confirmados-vs-muertos-por-pais&#34;&gt;Confirmados vs Muertos por pais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#progresion-mundial-en-el-tiempo-de-confirmados-y-muertos&#34;&gt;Progresion Mundial en el Tiempo de Confirmados y Muertos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#total-casos-confirmados-de-covid-19-por-pais&#34;&gt;Total Casos Confirmados de COVID 19 por Pais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#total-casos-confirmados-de-covid-19-por-pais-excluyendo-los-8-mas-infectados&#34;&gt;Total Casos Confirmados de COVID 19 por Pais (Excluyendo los 8 mas infectados)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#animacion-del-mapa-de-evolucion-temporal-del-codiv-19&#34;&gt;Animacion del Mapa de Evolucion Temporal del Codiv 19&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#covid-19-en-colombia&#34;&gt;Covid 19 en Colombia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#numero-de-casos-covid-19-en-colombia&#34;&gt;Numero de Casos COVID 19 en Colombia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#actualizacion-de-las-graficas-cada-24-horas&#34;&gt;Actualizacion de las Graficas cada 24 Horas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codigo-fuente-jupyter-notebook&#34;&gt;Codigo Fuente Jupyter notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refencias&#34;&gt;Refencias&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;paquetes-de-python-y-datos&#34;&gt;Paquetes de Python y Datos&lt;/h1&gt;

&lt;h2 id=&#34;paquetes-de-python&#34;&gt;Paquetes de Python&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;!pip install chart_studio -q
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import plotly.express as px
import numpy as np
import chart_studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para subir las graficas interactivas de plotly a chart studio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#chart-studio api
username = &#39;&#39; # your username
api_key = &#39;&#39; # your api api_key
chart_studio.tools.set_credentials_file(username=username, api_key=api_key)
import chart_studio.plotly as py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;importar-datos&#34;&gt;Importar datos&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed = pd.read_csv(&#39;https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;)
death = pd.read_csv(&#39;https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;)
recovered = pd.read_csv(&#39;https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;datos-cssegisanddata-covid-19&#34;&gt;Datos CSSEGISandData/COVID-19&lt;/h2&gt;

&lt;p&gt;Descripcion de los datos en ingles&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Province/State:&lt;/strong&gt; China - province name; US/Canada/Australia/ - city name, state/province name; Others - name of the event (e.g., &amp;ldquo;Diamond Princess&amp;rdquo; cruise ship); other countries - blank.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Country/Region:&lt;/strong&gt; country/region name conforming to WHO (will be updated).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Update:&lt;/strong&gt; MM/DD/YYYY HH:mm (24 hour format, in UTC).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Confirmed:&lt;/strong&gt; the number of confirmed cases. For Hubei Province: from Feb 13 (GMT +8), we report both clinically diagnosed and lab-confirmed cases. For lab-confirmed cases only (Before Feb 17), please refer to who_covid_19_situation_reports. For Italy, diagnosis standard might be changed since Feb 27 to &amp;ldquo;slow the growth of new case numbers.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deaths:&lt;/strong&gt; the number of deaths.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recovered:&lt;/strong&gt; the number of recovered cases.&lt;/p&gt;

&lt;h3 id=&#34;eliminar-ubicacion&#34;&gt;Eliminar Ubicacion&lt;/h3&gt;

&lt;p&gt;Se va realizar un analisis general de los datos y No se van a tomar los datos geograficos de &lt;em&gt;latitud&lt;/em&gt;, &lt;em&gt;longitud&lt;/em&gt; y los datos de &lt;em&gt;Province/State&lt;/em&gt; estan incompletos.&lt;/p&gt;

&lt;p&gt;Solo se realizara un analisis por pais entonces se eliminaran las columnas mencionadas anteriormente&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed = confirmed.drop(columns=[&#39;Lat&#39;, &#39;Long&#39;,&#39;Province/State&#39;])
death = death.drop(columns=[&#39;Lat&#39;, &#39;Long&#39;,&#39;Province/State&#39;])
recovered  = recovered.drop(columns=[&#39;Lat&#39;, &#39;Long&#39;,&#39;Province/State&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;casos-activos&#34;&gt;Casos Activos&lt;/h3&gt;

&lt;p&gt;Se calcula a partir del nÃºmero de personas confirmadas - muertos - recuperados&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;active =confirmed.copy()
active.iloc[:,1:] = active.iloc[:,1:] - death.iloc[:,1:] - recovered.iloc[:,1:]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;consolidar-datos&#34;&gt;Consolidar datos&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed_group = confirmed.groupby(by=&#39;Country/Region&#39;).aggregate(np.sum).T
confirmed_group.index.name = &#39;date&#39;
confirmed_group =  confirmed_group.reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;recovered_group = recovered.groupby(by=&#39;Country/Region&#39;).aggregate(np.sum).T
recovered_group.index.name = &#39;date&#39;
recovered_group =  recovered_group.reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;active_group = active.groupby(by=&#39;Country/Region&#39;).aggregate(np.sum).T
active_group.index.name = &#39;date&#39;
active_group =  active_group.reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;death_group = death.groupby(by=&#39;Country/Region&#39;).aggregate(np.sum).T
death_group.index.name = &#39;date&#39;
death_group =  death_group.reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed_melt = confirmed_group.melt(id_vars=&amp;quot;date&amp;quot;).copy()
confirmed_melt.rename(columns = {&#39;value&#39;:&#39;Confirmados&#39;, &#39;date&#39;:&#39;Fecha&#39;}, inplace = True)

death_melt = death_group.melt(id_vars=&amp;quot;date&amp;quot;)
death_melt.rename(columns = {&#39;value&#39;:&#39;Muertos&#39;, &#39;date&#39;:&#39;Fecha&#39;}, inplace = True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;datos-mundiales&#34;&gt;Datos Mundiales&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Numero de Casos confirmados por dia en el mundo
column_names = [&amp;quot;Fecha&amp;quot;, &amp;quot;Confirmados&amp;quot;, &amp;quot;Recuperados&amp;quot;,&amp;quot;Muertos&amp;quot;]
world = pd.DataFrame(columns = column_names)
world[&#39;Fecha&#39;] = confirmed_group[&#39;date&#39;].copy()
world[&#39;Confirmados&#39;] = confirmed_group.iloc[:,1:].sum(1)
world[&#39;Muertos&#39;] = death_group.iloc[:,1:].sum(1)
world[&#39;Recuperados&#39;] = recovered_group.iloc[:,1:].sum(1)
world[&#39;Activos&#39;] = active_group.iloc[:,1:].sum(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;covid19-en-el-mundo&#34;&gt;Covid19 en el Mundo&lt;/h1&gt;

&lt;h2 id=&#34;evolucion-animada-de-casos-activos-por-pais&#34;&gt;Evolucion Animada de Casos Activos por Pais&lt;/h2&gt;

&lt;p&gt;La grÃ¡fica animada de la evoluciÃ³n temporal de los casos activos por paÃ­s, la he creado con la libreria &lt;a href=&#34;https://github.com/JackMcKew/pandas_alive&#34;&gt;Pandas alive&lt;/a&gt; y &lt;a href=&#34;https://github.com/dexplo/bar_chart_race&#34;&gt;Bar Chart Race&lt;/a&gt;.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ogd7ZifCDQU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas_alive
active_evol = active_group.set_index(&#39;date&#39;)
active_evol.index = pd.to_datetime(active_evol.index)
active_evol.plot_animated(filename=&#39;evolucion_casos_activos.mp4&#39;, n_bars=8,n_visible=8,
                          title=&#39;EvoluciÃ³n en el tiempo de Casos Activos COVID-19 por pais \n https://joserzapata.github.io/&#39;,
                          perpendicular_bar_func=&#39;mean&#39;, dpi=300,
                          period_label={&#39;x&#39;: .99, &#39;y&#39;: .25, &#39;ha&#39;: &#39;right&#39;, &#39;va&#39;: &#39;center&#39;},
                          period_fmt=&#39;%B %d, %Y&#39;,
                          period_summary_func=lambda v: {&#39;x&#39;: .99, &#39;y&#39;: .18,
                                      &#39;s&#39;: f&#39;Total Activos: {v.nlargest(8).sum():,.0f}&#39;,
                                      &#39;ha&#39;: &#39;right&#39;, &#39;size&#39;: 9, &#39;family&#39;: &#39;Courier New&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;visualizacion-con-plotly&#34;&gt;Visualizacion con Plotly&lt;/h2&gt;

&lt;h2 id=&#34;valores-mundiales-de-casos-confirmados-activos-recuperados-y-muertos&#34;&gt;Valores Mundiales de Casos Confirmados, Activos, Recuperados y Muertos&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;450&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/2362.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp = pd.DataFrame(world.iloc[-1,:]).T
tm = temp.melt(id_vars=&amp;quot;Fecha&amp;quot;, value_vars=[ &amp;quot;Confirmados&amp;quot;,&amp;quot;Activos&amp;quot;,&amp;quot;Recuperados&amp;quot;,&amp;quot;Muertos&amp;quot;])
fig = px.bar(tm, x=&amp;quot;variable&amp;quot; , y=&amp;quot;value&amp;quot;, color= &#39;variable&#39;, text=&#39;value&#39;,
             color_discrete_sequence=[&amp;quot;teal&amp;quot;,&amp;quot;navy&amp;quot;,&amp;quot;green&amp;quot;, &amp;quot;coral&amp;quot;],
             height=500, width=600,
             title= f&#39;Total de Casos Mundiales de COVID 19 - {str(world.iloc[-1,0])}&#39;)
fig.update_traces(textposition=&#39;outside&#39;)#poner los valores de las barras fuera
fig.layout.update(showlegend=False,
                  yaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Numero de Personas&amp;quot;}}, # Cambiar texto eje y
                  xaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}} #Esconder nombre eje x
                  )
# grabar grafica en chart-studio si se proporciona el api-key
if api_key: py.plot(fig, filename = &#39;total_casos_general&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapa-mundial-de-confirmados-por-pais&#34;&gt;Mapa Mundial de Confirmados por Pais&lt;/h2&gt;

&lt;p&gt;Mover el Mouse sobre el mapa para ver la informacion de cada pais
&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/2364.embed?link=false&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed_melt[&#39;Fecha&#39;] = pd.to_datetime(confirmed_melt[&#39;Fecha&#39;])
confirmed_melt[&#39;Fecha&#39;] = confirmed_melt[&#39;Fecha&#39;].dt.strftime(&#39;%m/%d/%Y&#39;)

max_Fecha = confirmed_melt[&#39;Fecha&#39;].max()
conf_max = confirmed_melt[confirmed_melt[&#39;Fecha&#39;]== max_Fecha]
conf_max.dropna(inplace=True) #eliminar filas con valores faltantes

fig = px.choropleth(conf_max, locations=&amp;quot;Country/Region&amp;quot;, locationmode=&#39;country names&#39;, 
                     color=np.log10(conf_max[&amp;quot;Confirmados&amp;quot;]), hover_name=&amp;quot;Country/Region&amp;quot;, 
                     hover_data = [&amp;quot;Confirmados&amp;quot;],
                     projection=&amp;quot;natural earth&amp;quot;, width=900,
                     color_continuous_scale = px.colors.sequential.Jet,        
                     title=&#39;Mapa de Confirmados COVID 19 por Pais&#39;)
fig.update(layout_coloraxis_showscale=False)
#py.plot(fig, filename = &#39;mapa_confirmados_pais&#39;, auto_open=False)
fig.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;confirmados-vs-muertos-por-pais&#34;&gt;Confirmados vs Muertos por pais&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/289.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;death_melt[&#39;Fecha&#39;] = pd.to_datetime(death_melt[&#39;Fecha&#39;])
death_melt[&#39;Fecha&#39;] = death_melt[&#39;Fecha&#39;].dt.strftime(&#39;%m/%d/%Y&#39;)

max_Fecha = death_melt[&#39;Fecha&#39;].max()
death_max = death_melt[death_melt[&#39;Fecha&#39;]== max_Fecha].copy()
death_max.dropna(inplace=True) #eliminar filas con valores faltantes

fig = px.scatter(full_melt_max.sort_values(&#39;Muertos&#39;, ascending=False).iloc[:15, :], 
                 x=&#39;Confirmados&#39;, y=&#39;Muertos&#39;, color=&#39;Country/Region&#39;, size=&#39;Confirmados&#39;, height=500,
                 text=&#39;Country/Region&#39;, log_x=True, log_y=True, title= f&#39;Muertos vs Confirmados - {max_Fecha} - (15 Paises)&#39;)
fig.update_traces(textposition=&#39;top center&#39;)
fig.layout.update(showlegend = False)
#py.plot(fig, filename = &#39;scatter_muertos_confirmados&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;progresion-mundial-en-el-tiempo-de-confirmados-y-muertos&#34;&gt;Progresion Mundial en el Tiempo de Confirmados y Muertos&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/3.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;world_melt = world.melt(id_vars=&#39;Fecha&#39;, value_vars= list(world.columns)[1:], var_name=None)

fig = px.line(world_melt, x=&amp;quot;Fecha&amp;quot;, y= &#39;value&#39;,
              color=&#39;variable&#39;,  color_discrete_sequence=[&amp;quot;teal&amp;quot;,&amp;quot;green&amp;quot;,&amp;quot;coral&amp;quot;, &amp;quot;navy&amp;quot;],
              title=f&#39;Total de Casos en el tiempo de COVID 19 - {world.iloc[-1,0]}&#39;)
for n in list(world.columns)[1:]:
  fig.add_annotation(x=world.iloc[-1,0], y=world.loc[world.index[-1],n],
                     text=n, xref=&amp;quot;x&amp;quot;,yref=&amp;quot;y&amp;quot;,
                     showarrow=True, ax=-50, ay=-20)
# Indicador de numero total de confirmados
fig.add_indicator( title= {&#39;text&#39;:&#39;Confirmados&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;teal&#39;}},
                  value = world[&#39;Confirmados&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: world[&#39;Confirmados&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0, 0.25], &#39;y&#39;: [0.15, .4]})
#Indicador numero total de Activos
fig.add_indicator(title={&#39;text&#39;:&#39;Activos&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;navy&#39;}},
                  value = world[&#39;Activos&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: world[&#39;Activos&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0, 0.25], &#39;y&#39;: [0.6, .85]})
#Indicador numero total de Recuperados
fig.add_indicator(title={&#39;text&#39;:&#39;Recuperados&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;green&#39;}},
                  value = world[&#39;Recuperados&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: world[&#39;Recuperados&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0.25, 0.50], &#39;y&#39;: [0.6, .85]}) 
#Indicador numero total de muertos
fig.add_indicator(title={&#39;text&#39;:&#39;Muertos&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;coral&#39;}}, 
                  value = world[&#39;Muertos&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: world[&#39;Muertos&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0.25, 0.5], &#39;y&#39;: [0.15, .4]})  
fig.layout.update(showlegend = False,
                  yaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Numero de Personas&amp;quot;}}, # Cambiar texto eje y
                  )
# grabar grafica en chart-studio si se proporciona el api-key
if api_key: py.plot(fig, filename = &#39;total_casos_serie&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;total-casos-confirmados-de-covid-19-por-pais&#34;&gt;Total Casos Confirmados de COVID 19 por Pais&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/5.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = confirmed_group.copy()
# Cambiar el nombre de la columna
df1.rename(columns = {&#39;date&#39;:&#39;Fecha&#39;}, inplace = True) 
df_melt = df1.melt(id_vars=&#39;Fecha&#39;, value_vars= list(df1.columns)[1:], var_name=None)
fig = px.line(df_melt, x=&#39;Fecha&#39; , y=&#39;value&#39;, color=&#39;Country/Region&#39;,
              color_discrete_sequence=px.colors.qualitative.G10,
              title=f&#39;Total Casos Confirmados de COVID 19 por Pais (Excluyendo China) - {world.iloc[-1,0]}&#39;)
# 8 paises mas infectados
fecha = df1[&#39;Fecha&#39;].iloc[-1] #obtener la fecha del ultimo dato
paises = df1.iloc[-1,1:] #obtener la serie sin el primer dato, fecha
paises.sort_values(ascending=False, inplace=True)
mas_infectados=[]
for n in range(8):
  fig.add_annotation(x=fecha, y=paises[n], text=paises.index[n],
                     showarrow=True, ax=+30, ay=0)
  mas_infectados.append(paises.index[n])
fig.layout.update(showlegend=False,
                  yaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Numero de Personas&amp;quot;}}, # Cambiar texto eje y
                  )
# grabar grafica en chart-studio
#py.plot(fig, filename = &#39;total_casos_no_china&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;total-casos-confirmados-de-covid-19-por-pais-excluyendo-los-8-mas-infectados&#34;&gt;Total Casos Confirmados de COVID 19 por Pais (Excluyendo los 8 mas infectados)&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/7.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = confirmed_group.drop(columns= mas_infectados).copy()
# Cambiar el nombre de la columna
df2.rename(columns = {&#39;date&#39;:&#39;Fecha&#39;}, inplace = True) 

df_melt2 = df2.melt(id_vars=&#39;Fecha&#39;, value_vars= list(df2.columns)[1:], var_name=None)
fig = px.line(df_melt2, x=&#39;Fecha&#39; , y=&#39;value&#39;, color=&#39;Country/Region&#39;,
              color_discrete_sequence=px.colors.qualitative.G10,
              title=f&#39;Total Casos Confirmados de COVID 19 por Pais (Excluyendo los 8 mas infectados) - {world.iloc[-1,0]}&#39;)

fecha = df2[&#39;Fecha&#39;].iloc[-1] #obtener la fecha del ultimo dato
paises = df2.iloc[-1,1:] #obtener la serie sin el primer dato, fecha
paises.sort_values(ascending=False, inplace=True)
for n in range(8):
  fig.add_annotation(x=fecha, y=paises[n], text=paises.index[n],
                     showarrow=True, ax=+30, ay=0)
fig.layout.update(showlegend=False,
                  yaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Numero de Personas&amp;quot;}}, # Cambiar texto eje y
                  )
#py.plot(fig, filename = &#39;total_casos_no_8_infectados&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;animacion-del-mapa-de-evolucion-temporal-del-codiv-19&#34;&gt;Animacion del Mapa de Evolucion Temporal del Codiv 19&lt;/h2&gt;

&lt;p&gt;Mover el Mouse sobre el mapa para ver la informacion de cada pais. Presionar el boton de play para ver la animacion.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/54.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;confirmed_melt[&#39;Fecha&#39;] = pd.to_datetime(confirmed_melt[&#39;Fecha&#39;])
confirmed_melt[&#39;Fecha&#39;] = confirmed_melt[&#39;Fecha&#39;].dt.strftime(&#39;%m/%d/%Y&#39;)
confirmed_melt[&#39;size&#39;] = confirmed_melt[&#39;Confirmados&#39;].pow(0.3)
confirmed_melt.dropna(inplace=True) #eliminar filas con valores faltantes

fig = px.scatter_geo(confirmed_melt, locations=&amp;quot;Country/Region&amp;quot;, locationmode=&#39;country names&#39;, 
                     color=&amp;quot;Confirmados&amp;quot;, size=&#39;size&#39;, hover_name=&amp;quot;Country/Region&amp;quot;, 
                     range_color= [0, max(confirmed_melt[&#39;Confirmados&#39;])+2], 
                     projection=&amp;quot;natural earth&amp;quot;, animation_frame=&amp;quot;Fecha&amp;quot;, 
                     title=&#39;Contagiados COVID 19 en el Tiempo&#39;)
fig.update(layout_coloraxis_showscale=False)
#py.plot(fig, filename = &#39;mapa_evolucion_temporal&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;covid-19-en-colombia&#34;&gt;Covid 19 en Colombia&lt;/h1&gt;

&lt;h2 id=&#34;numero-de-casos-covid-19-en-colombia&#34;&gt;Numero de Casos COVID 19 en Colombia&lt;/h2&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//plotly.com/~joser.zapata/9.embed?link=false&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;column_names = [&amp;quot;Fecha&amp;quot;, &amp;quot;Confirmados&amp;quot;, &amp;quot;Recuperados&amp;quot;,&amp;quot;Muertos&amp;quot;, &amp;quot;Activos&amp;quot;]
colombia = pd.DataFrame(columns = column_names)
colombia[&#39;Fecha&#39;] = confirmed_group[&#39;Fecha&#39;]
colombia[&#39;Confirmados&#39;] = confirmed_group[&#39;Colombia&#39;]
colombia[&#39;Muertos&#39;] = death_group[&#39;Colombia&#39;]
colombia[&#39;Recuperados&#39;] = recovered_group[&#39;Colombia&#39;]
colombia[&#39;Activos&#39;] = active_group[&#39;Colombia&#39;]
df_melt3 = colombia.melt(id_vars=&#39;Fecha&#39;, value_vars= list(colombia.columns)[1:], var_name=None)
fig = px.line(df_melt3, x=&#39;Fecha&#39; , y=&#39;value&#39;, color=&#39;variable&#39;,
              color_discrete_sequence=[&amp;quot;teal&amp;quot;,&amp;quot;green&amp;quot;,&amp;quot;coral&amp;quot;, &amp;quot;navy&amp;quot;],
              title=f&#39;Corona virus (COVID 19) en Colombia - {colombia.iloc[-1,0]}&#39;)
# Indicador de numero total de confirmados
fig.add_indicator( title= {&#39;text&#39;:&#39;Confirmados&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;teal&#39;}},
                  value = colombia[&#39;Confirmados&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: colombia[&#39;Confirmados&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0, 0.25], &#39;y&#39;: [0.15, .4]})
#Indicador numero total de Activos
fig.add_indicator(title={&#39;text&#39;:&#39;Activos&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;navy&#39;}},
                  value = colombia[&#39;Activos&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: colombia[&#39;Activos&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0, 0.25], &#39;y&#39;: [0.6, .85]})
#Indicador numero total de Recuperados
fig.add_indicator(title={&#39;text&#39;:&#39;Recuperados&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;green&#39;}},
                  value = colombia[&#39;Recuperados&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: colombia[&#39;Recuperados&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0.25, 0.50], &#39;y&#39;: [0.6, .85]}) 
#Indicador numero total de muertos
fig.add_indicator(title={&#39;text&#39;:&#39;Muertos&#39;, &#39;font&#39;:{&#39;color&#39;:&#39;coral&#39;}}, 
                  value = colombia[&#39;Muertos&#39;].iloc[-1],
                  mode = &amp;quot;number+delta&amp;quot;, delta = {&amp;quot;reference&amp;quot;: colombia[&#39;Muertos&#39;
                  ].iloc[-2], &#39;relative&#39;: True },domain = {&#39;x&#39;: [0.25, 0.5], &#39;y&#39;: [0.15, .4]})
fig.layout.update(showlegend=False,
                  yaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Numero de Personas&amp;quot;}}, # Cambiar texto eje y
                  xaxis =  {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Fecha&amp;quot;}})
# grabar grafica en chart-studio si se proporciona el api-key
if api_key: py.plot(fig, filename = &#39;Colombia_general&#39;, auto_open=False)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;actualizacion-de-las-graficas-cada-24-horas&#34;&gt;Actualizacion de las Graficas cada 24 Horas&lt;/h1&gt;

&lt;p&gt;Las graficas creadas con plotly son enviadas a chart-studio y cargadas en la pagina web mediante
el tag &lt;em&gt;iframe&lt;/em&gt; de html.
Las grÃ¡ficas se actualizan cada 24 horas usando &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;codigo-fuente-jupyter-notebook&#34;&gt;Codigo Fuente Jupyter notebook&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Google Colaboratory&lt;/th&gt;
&lt;th&gt;My binder&lt;/th&gt;
&lt;th&gt;NBviewver&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/JoseRZapata/JoseRZapata.github.io/blob/master/Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg&#34; alt=&#34;Open In Colab&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/JoseRZapata/JoseRZapata.github.io/master?filepath=Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg&#34; alt=&#34;Binder&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://nbviewer.jupyter.org/github/JoseRZapata/JoseRZapata.github.io/blob/master/Jupyter_Notebook/Covid19_Visualizacion_es.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/render-nbviewer-orange.svg&#34; alt=&#34;nbviewer&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;refencias&#34;&gt;Refencias&lt;/h1&gt;

&lt;p&gt;Fuentes de datos, visualizaciones y anÃ¡lisis de datos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;https://github.com/CSSEGISandData/COVID-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/imdevskp/covid-19-analysis-viz-prediction-comparisons&#34;&gt;https://www.kaggle.com/imdevskp/covid-19-analysis-viz-prediction-comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://junye0798.com/post/build-a-dashboard-to-track-the-spread-of-coronavirus-using-dash/&#34;&gt;https://junye0798.com/post/build-a-dashboard-to-track-the-spread-of-coronavirus-using-dash/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Perishleaf/data-visualisation-scripts/tree/master/dash-2019-coronavirus&#34;&gt;https://github.com/Perishleaf/data-visualisation-scripts/tree/master/dash-2019-coronavirus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/tomas-pueyo/coronavirus-por-qu%C3%A9-debemos-actuar-ya-93079c61e200&#34;&gt;https://medium.com/tomas-pueyo/coronavirus-por-qu%C3%A9-debemos-actuar-ya-93079c61e200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;https://github.com/features/actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Pyspark con Google Colab</title>
      <link>https://joserzapata.github.io/post/pyspark-google-colab/</link>
      <pubDate>Mon, 09 Mar 2020 23:00:43 -0500</pubDate>
      <guid>https://joserzapata.github.io/post/pyspark-google-colab/</guid>
      <description>&lt;h1 id=&#34;pyspark-en-google-colab-automatico&#34;&gt;PySpark en Google Colab Automatico&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Instalacion Marzo/2020&lt;/li&gt;
&lt;li&gt;Intalacion Automatica
&lt;ol&gt;
&lt;li&gt;Instalacion Java&lt;/li&gt;
&lt;li&gt;Instalacion de Spark&lt;/li&gt;
&lt;li&gt;Ejemplo de Uso de pyspark&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&#34; data-name=&#34;bmc-button&#34; data-slug=&#34;joserzapata&#34; data-color=&#34;#328cc1&#34; data-emoji=&#34;&#34; data-font=&#34;Cookie&#34; data-text=&#34;Comprame un Cafe&#34; data-outline-color=&#34;#000000&#34; data-font-color=&#34;#ffffff&#34; data-coffee-color=&#34;#FFDD00&#34; &gt;&lt;/script&gt;&lt;br&gt;
&lt;p&gt;Abrir en Google Colab:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/JoseRZapata/JoseRZapata.github.io/blob/master/Jupyter_Notebook/Pyspark_Colab_es.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;instalacion-rapida-marzo-2020&#34;&gt;Instalacion Rapida Marzo/ 2020&lt;/h1&gt;
&lt;p&gt;De forma General para usar pyspark en Colab Marzo/2020 seria con los siguientes comandos en una celda en Colab:&lt;/p&gt;
&lt;p&gt;Instalar Java&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!apt-get install openjdk-8-jdk-headless -qq &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os # libreria de manejo del sistema operativo
os.system(&amp;quot;wget -q https://www-us.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz&amp;quot;)
os.system(&amp;quot;tar xf /spark-2.4.5-bin-hadoop2.7.tgz&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;instalar pyspark&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!pip install -q pyspark
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Variables de Entorno
os.environ[&amp;quot;JAVA_HOME&amp;quot;] = &amp;quot;/usr/lib/jvm/java-8-openjdk-amd64&amp;quot;
os.environ[&amp;quot;SPARK_HOME&amp;quot;] = f&amp;quot;/content/{ver_spark}-bin-hadoop2.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Cargar Pyspark
from pyspark.sql import SparkSession
spark = SparkSession.builder.appName(&amp;quot;Test_spark&amp;quot;).master(&amp;quot;local[*]&amp;quot;).getOrCreate()
spark
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero cuando salga una nueva version de spark sera necesario actualizar los
links de descarga, ya que siempre borran las versiones 2.x.x cuando sale una nueva.&lt;/p&gt;
&lt;p&gt;Lo mejor es configurar automaticamente para que descargue la version que sea
mayor que 2.3.4 que es la anterior y menor que spark 3.0.0 que aun se encuentra en desarrollo&lt;/p&gt;
&lt;p&gt;Para esto el siguiente codigo detecta la version actual de spark, la descarga, la descomprime y luego realiza la instalacion de spark en google colab.&lt;/p&gt;
&lt;h1 id=&#34;instalacion-automatica&#34;&gt;Instalacion Automatica&lt;/h1&gt;
&lt;h2 id=&#34;instalacion-de-java&#34;&gt;Instalacion de Java&lt;/h2&gt;
&lt;p&gt;Google Colaboratory funciona en un ambiente linux, por lo tanto se pueden usar comandos shell de linux antecedidos del caracter &amp;lsquo;!&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!apt-get install openjdk-8-jdk-headless -qq &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;instalacion-de-spark&#34;&gt;Instalacion de Spark&lt;/h2&gt;
&lt;p&gt;Obtener automaticamente la ultima version de spark de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bs4 import BeautifulSoup
import requests
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Obtener las versiones de spark la pagina web
url = &#39;https://downloads.apache.org/spark/&#39; 
r = requests.get(url)
html_doc = r.text
soup = BeautifulSoup(html_doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# leer la pagina web y obtener las versiones de spark disponibles
link_files = []
for link in soup.find_all(&#39;a&#39;):
  link_files.append(link.get(&#39;href&#39;))
spark_link = [x for x in link_files if &#39;spark&#39; in x]  
print(spark_link)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[&amp;lsquo;spark-2.3.4/&amp;rsquo;, &amp;lsquo;spark-2.4.5/&amp;rsquo;, &amp;lsquo;spark-3.0.0-preview2/&#39;]&lt;/p&gt;
&lt;p&gt;La version a usar seran las superiores a spark-2.3.4  y menores a spark-3.0.0&lt;/p&gt;
&lt;p&gt;obtener la version y eliminar el caracter &amp;lsquo;/&amp;rsquo; del final&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ver_spark = spark_link[1][:-1] # obtener la version y eliminar el caracter &#39;/&#39; del final
print(ver_spark)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;spark-2.4.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os # libreria de manejo del sistema operativo
#instalar automaticamente la version deseadda de spark
link = &amp;quot;https://www-us.apache.org/dist/spark/&amp;quot;
os.system(f&amp;quot;wget -q {link}{ver_spark}/{ver_spark}-bin-hadoop2.7.tgz&amp;quot;)
os.system(f&amp;quot;tar xf {ver_spark}-bin-hadoop2.7.tgz&amp;quot;)

# instalar pyspark
!pip install -q pyspark
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;|ââââââââââââââââââââââââââââââââ| 217.8MB 63kB/s 
|ââââââââââââââââââââââââââââââââ| 204kB 53.8MB/s 
Building wheel for pyspark (setup.py) ... done
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;definir-variables-de-entorno&#34;&gt;Definir variables de entorno&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;os.environ[&amp;quot;JAVA_HOME&amp;quot;] = &amp;quot;/usr/lib/jvm/java-8-openjdk-amd64&amp;quot;
os.environ[&amp;quot;SPARK_HOME&amp;quot;] = f&amp;quot;/content/{ver_spark}-bin-hadoop2.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cargar-pyspark-en-el-sistema&#34;&gt;Cargar pyspark en el sistema&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;from pyspark.sql import SparkSession
spark = SparkSession.builder.appName(&amp;quot;Test_spark&amp;quot;).master(&amp;quot;local[*]&amp;quot;).getOrCreate()
spark
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;p&gt;&lt;b&gt;SparkSession - in-memory&lt;/b&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;p&gt;&lt;b&gt;SparkContext&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;&lt;a href=&#34;http://cf857c0401dc:4040&#34;&gt;Spark UI&lt;/a&gt;&lt;/p&gt;
  &lt;dl&gt;
      &lt;dt&gt;Version&lt;/dt&gt;
        &lt;dd&gt;&lt;code&gt;v2.4.5&lt;/code&gt;&lt;/dd&gt;
      &lt;dt&gt;Master&lt;/dt&gt;
        &lt;dd&gt;&lt;code&gt;local[*]&lt;/code&gt;&lt;/dd&gt;
      &lt;dt&gt;AppName&lt;/dt&gt;
        &lt;dd&gt;&lt;code&gt;pyspark-shell&lt;/code&gt;&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;ejemplo-de-uso-de-pyspark&#34;&gt;Ejemplo de Uso de pyspark&lt;/h1&gt;
&lt;p&gt;Leer archivo de prueba&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;archivo = &#39;./sample_data/california_housing_train.csv&#39;
df_spark = spark.read.csv(archivo, inferSchema=True, header=True)

# imprimir tipo de archivo
print(type(df_spark))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pyspark.sql.dataframe.DataFrame&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Â¿Numero de registros en el dataframe?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_spark.count()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;17000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estructura del dataframe&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_spark.printSchema()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;root
 |-- longitude: double (nullable = true)
 |-- latitude: double (nullable = true)
 |-- housing_median_age: double (nullable = true)
 |-- total_rooms: double (nullable = true)
 |-- total_bedrooms: double (nullable = true)
 |-- population: double (nullable = true)
 |-- households: double (nullable = true)
 |-- median_income: double (nullable = true)
 |-- median_house_value: double (nullable = true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Â¿Nombre de las Columnas de dataframe?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_spark.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;longitude&#39;,
 &#39;latitude&#39;,
 &#39;housing_median_age&#39;,
 &#39;total_rooms&#39;,
 &#39;total_bedrooms&#39;,
 &#39;population&#39;,
 &#39;households&#39;,
 &#39;median_income&#39;,
 &#39;median_house_value&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ver los primeros 20 registros del dataframe&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df_spark.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;+---------+--------+------------------+-----------+--------------+----------+----------+-------------+------------------+
|longitude|latitude|housing_median_age|total_rooms|total_bedrooms|population|households|median_income|median_house_value|
+---------+--------+------------------+-----------+--------------+----------+----------+-------------+------------------+
|  -114.31|   34.19|              15.0|     5612.0|        1283.0|    1015.0|     472.0|       1.4936|           66900.0|
|  -114.47|    34.4|              19.0|     7650.0|        1901.0|    1129.0|     463.0|         1.82|           80100.0|
|  -114.56|   33.69|              17.0|      720.0|         174.0|     333.0|     117.0|       1.6509|           85700.0|
|  -114.57|   33.64|              14.0|     1501.0|         337.0|     515.0|     226.0|       3.1917|           73400.0|
|  -114.57|   33.57|              20.0|     1454.0|         326.0|     624.0|     262.0|        1.925|           65500.0|
|  -114.58|   33.63|              29.0|     1387.0|         236.0|     671.0|     239.0|       3.3438|           74000.0|
|  -114.58|   33.61|              25.0|     2907.0|         680.0|    1841.0|     633.0|       2.6768|           82400.0|
|  -114.59|   34.83|              41.0|      812.0|         168.0|     375.0|     158.0|       1.7083|           48500.0|
|  -114.59|   33.61|              34.0|     4789.0|        1175.0|    3134.0|    1056.0|       2.1782|           58400.0|
|   -114.6|   34.83|              46.0|     1497.0|         309.0|     787.0|     271.0|       2.1908|           48100.0|
|   -114.6|   33.62|              16.0|     3741.0|         801.0|    2434.0|     824.0|       2.6797|           86500.0|
|   -114.6|    33.6|              21.0|     1988.0|         483.0|    1182.0|     437.0|        1.625|           62000.0|
|  -114.61|   34.84|              48.0|     1291.0|         248.0|     580.0|     211.0|       2.1571|           48600.0|
|  -114.61|   34.83|              31.0|     2478.0|         464.0|    1346.0|     479.0|        3.212|           70400.0|
|  -114.63|   32.76|              15.0|     1448.0|         378.0|     949.0|     300.0|       0.8585|           45000.0|
|  -114.65|   34.89|              17.0|     2556.0|         587.0|    1005.0|     401.0|       1.6991|           69100.0|
|  -114.65|    33.6|              28.0|     1678.0|         322.0|     666.0|     256.0|       2.9653|           94900.0|
|  -114.65|   32.79|              21.0|       44.0|          33.0|      64.0|      27.0|       0.8571|           25000.0|
|  -114.66|   32.74|              17.0|     1388.0|         386.0|     775.0|     320.0|       1.2049|           44000.0|
|  -114.67|   33.92|              17.0|       97.0|          24.0|      29.0|      15.0|       1.2656|           27500.0|
+---------+--------+------------------+-----------+--------------+----------+----------+-------------+------------------+
only showing top 20 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;descricipcion-estadistica-del-dataframe&#34;&gt;Descricipcion Estadistica del dataframe&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_spark.describe().toPandas().transpose()
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;mean&lt;/td&gt;
&lt;td&gt;stddev&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;longitude&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;-119.56210823529375&lt;/td&gt;
&lt;td&gt;2.0051664084260357&lt;/td&gt;
&lt;td&gt;-124.35&lt;/td&gt;
&lt;td&gt;-114.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;latitude&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;35.6252247058827&lt;/td&gt;
&lt;td&gt;2.1373397946570867&lt;/td&gt;
&lt;td&gt;32.54&lt;/td&gt;
&lt;td&gt;41.95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;housing_median_age&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;28.58935294117647&lt;/td&gt;
&lt;td&gt;12.586936981660406&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;52.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total_rooms&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;2643.664411764706&lt;/td&gt;
&lt;td&gt;2179.947071452777&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;37937.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total_bedrooms&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;539.4108235294118&lt;/td&gt;
&lt;td&gt;421.4994515798648&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;6445.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;population&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;1429.5739411764705&lt;/td&gt;
&lt;td&gt;1147.852959159527&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;35682.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;households&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;501.2219411764706&lt;/td&gt;
&lt;td&gt;384.5208408559016&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;6082.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;median_income&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;3.883578100000021&lt;/td&gt;
&lt;td&gt;1.9081565183791036&lt;/td&gt;
&lt;td&gt;0.4999&lt;/td&gt;
&lt;td&gt;15.0001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;median_house_value&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;207300.91235294117&lt;/td&gt;
&lt;td&gt;115983.76438720895&lt;/td&gt;
&lt;td&gt;14999.0&lt;/td&gt;
&lt;td&gt;500001.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Descripcion estadistica de una sola columna (&amp;lsquo;median_house_value&amp;rsquo;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_spark.describe([&#39;median_house_value&#39;]).show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;+-------+------------------+
|summary|median_house_value|
+-------+------------------+
|  count|             17000|
|   mean|207300.91235294117|
| stddev|115983.76438720895|
|    min|           14999.0|
|    max|          500001.0|
+-------+------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma se puede instalar automaticamente spark en google colab y hacer uno de el de forma gratis.&lt;/p&gt;
&lt;p&gt;En la version gratis solo se cuenta con una CPU si se quiere aumentar la capacidad de procesamiento es necesario pagar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Social Media Behaviour with exclusive Facebook data</title>
      <link>https://joserzapata.github.io/project/social-media-behaviour/</link>
      <pubDate>Fri, 14 Feb 2020 17:09:59 -0500</pubDate>
      <guid>https://joserzapata.github.io/project/social-media-behaviour/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ComprensiÃ³n de la mÃºsica con Python, una mirada desde la FÃ­sica y la MatemÃ¡tica</title>
      <link>https://joserzapata.github.io/talk/pycon2020/</link>
      <pubDate>Fri, 07 Feb 2020 12:35:00 -0500</pubDate>
      <guid>https://joserzapata.github.io/talk/pycon2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ACMUS - Advancing Computational Musicology: Semi-supervised and Unsupervised Segmentation and Annotation of Musical Collections</title>
      <link>https://joserzapata.github.io/publication/acmus19/</link>
      <pubDate>Fri, 01 Nov 2019 19:28:09 +0800</pubDate>
      <guid>https://joserzapata.github.io/publication/acmus19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aplicaciones de Audio con Machine Learning</title>
      <link>https://joserzapata.github.io/talk/meetup_2018/</link>
      <pubDate>Tue, 02 Oct 2018 18:00:00 -0500</pubDate>
      <guid>https://joserzapata.github.io/talk/meetup_2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Audio signal analysis with python</title>
      <link>https://joserzapata.github.io/talk/pycon2018/</link>
      <pubDate>Fri, 09 Feb 2018 11:40:35 -0500</pubDate>
      <guid>https://joserzapata.github.io/talk/pycon2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sistemas Automaticos para Extraccion de InformaciÃ³n Musical (Generalidades y Aplicaciones)</title>
      <link>https://joserzapata.github.io/talk/aes2016/</link>
      <pubDate>Fri, 22 Jul 2016 14:00:00 -0500</pubDate>
      <guid>https://joserzapata.github.io/talk/aes2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Essentia: an open source library for audio analysis</title>
      <link>https://joserzapata.github.io/publication/essentia-sigmm/</link>
      <pubDate>Fri, 21 Mar 2014 00:11:35 -0500</pubDate>
      <guid>https://joserzapata.github.io/publication/essentia-sigmm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Multifeature Beat tracker</title>
      <link>https://joserzapata.github.io/project/multifeature-beat-tracker/</link>
      <pubDate>Sat, 04 Jan 2014 23:00:38 -0500</pubDate>
      <guid>https://joserzapata.github.io/project/multifeature-beat-tracker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Essentia</title>
      <link>https://joserzapata.github.io/project/essentia/</link>
      <pubDate>Sat, 23 Nov 2013 07:45:12 -0500</pubDate>
      <guid>https://joserzapata.github.io/project/essentia/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Essentia: An Audio Analysis Library for Music Information Retrieval</title>
      <link>https://joserzapata.github.io/publication/essentia-ismir/</link>
      <pubDate>Sun, 03 Nov 2013 23:32:53 -0500</pubDate>
      <guid>https://joserzapata.github.io/publication/essentia-ismir/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Essentia: an open-source library for sound and music analysis</title>
      <link>https://joserzapata.github.io/publication/essentia-acm/</link>
      <pubDate>Mon, 21 Oct 2013 00:11:35 -0500</pubDate>
      <guid>https://joserzapata.github.io/publication/essentia-acm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparative Evaluation and Combination of Audio Tempo Estimation Approaches</title>
      <link>https://joserzapata.github.io/publication/comparative-tempo/</link>
      <pubDate>Fri, 22 Jul 2011 12:33:35 -0500</pubDate>
      <guid>https://joserzapata.github.io/publication/comparative-tempo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
